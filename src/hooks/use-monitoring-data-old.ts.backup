'use client'

import { useState, useEffect } from 'react'
import { MonitoringData } from '@/types/monitoring'

export function useMonitoringData() {
  const [data, setData] = useState({
    period: '7d',
    dateRange: {
      startDate: new Date().toISOString().split('T')[0],
      endDate: new Date().toISOString().split('T')[0]
    },
    metrics: {
      production: {
        totalPlans: 12,
        completedBatches: 8,
        activeProduction: 3,
        avgEfficiency: 85.5
      },
      distribution: {
        totalDistributions: 25,
        completedDeliveries: 22,
        inTransit: 3,
        avgDeliveryTime: 45,
        onTimeDeliveryRate: 92.5
      },
      financial: {
        totalIncome: 150000000,
        totalExpenses: 120000000,
        netIncome: 30000000,
        budgetUtilization: 80.0
      },
      quality: {
        totalChecks: 156,
        passedChecks: 148,
        failedChecks: 8,
        passRate: 94.9,
        avgScore: 4.7
      },
      inventory: {
        totalItems: 450,
        lowStockItems: 12,
        stockValue: 85000000,
        stockTurnover: 2.3
      },
      schools: {
        totalSchools: 35,
        activeSchools: 32,
        totalStudents: 8750,
        satisfactionRate: 96.2,
        avgMealsPerDay: 8500
      }
    },
    alertSummary: {
      total: 3,
      critical: 1,
      warning: 2,
      info: 0
    },
    systemHealth: {
      status: 'healthy' as const,
      uptime: '99.9%',
      responseTime: '120ms',
      errorRate: '0.1%'
    },
    lastUpdated: new Date().toISOString()
  })
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState(null)
  const [period, setPeriod] = useState('7d')
  const [autoRefresh, setAutoRefresh] = useState(false)
  const [refreshInterval, setRefreshInterval] = useState(30)

  useEffect(() => {
    // Placeholder implementation with correct structure
    setData({
      period: '7d',
      dateRange: {
        startDate: new Date().toISOString().split('T')[0],
        endDate: new Date().toISOString().split('T')[0]
      },
      metrics: {
        production: {
          totalPlans: 12,
          completedBatches: 8,
          activeProduction: 3,
          avgEfficiency: 85.5
        },
        distribution: {
          totalDistributions: 25,
          completedDeliveries: 22,
          inTransit: 3,
          avgDeliveryTime: 45,
          onTimeDeliveryRate: 92.5
        },
        financial: {
          totalIncome: 150000000,
          totalExpenses: 120000000,
          netIncome: 30000000,
          budgetUtilization: 80.0
        },
        quality: {
          totalChecks: 156,
          passedChecks: 148,
          failedChecks: 8,
          passRate: 94.9,
          avgScore: 4.7
        },
        inventory: {
          totalItems: 450,
          lowStockItems: 12,
          stockValue: 85000000,
          stockTurnover: 2.3
        },
        schools: {
          totalSchools: 35,
          activeSchools: 32,
          totalStudents: 8750,
          satisfactionRate: 96.2,
          avgMealsPerDay: 8500
        }
      },
      alertSummary: {
        total: 3,
        critical: 1,
        warning: 2,
        info: 0,
        recentAlerts: [
          {
            id: '1',
            type: 'critical',
            message: 'Low stock alert: Beras hampir habis',
            timestamp: new Date().toISOString()
          },
          {
            id: '2',
            type: 'warning',
            message: 'Production delay: Kitchen 2 delayed 30 minutes',
            timestamp: new Date().toISOString()
          }
        ]
      },
      systemHealth: {
        serverStatus: 'online',
        databaseStatus: 'connected',
        apiResponseTime: 120,
        uptime: 99.9,
        memoryUsage: 65.2,
        cpuUsage: 35.8,
        diskUsage: 78.5
      },
      lastUpdated: new Date().toISOString()
    })
    setLoading(false)
    setError(null)
  }, [])

  return {
    data,
    loading,
    error,
    period,
    setPeriod,
    fetchData: () => {},
    autoRefresh,
    setAutoRefresh,
    refreshInterval,
    setRefreshInterval,
    refresh: () => {}
  }
}
