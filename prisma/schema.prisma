generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  username      String?        @unique
  name          String
  password      String
  phone         String?
  address       String?
  avatar        String?
  isActive      Boolean        @default(true)
  emailVerified DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?
  accounts      Account[]
  auditLogs     AuditLog[]
  createdMenus  Menu[]
  notifications Notification[]
  sessions      Session[]
  roles         UserRole[]
  qualityCheckpoints QualityCheckpoint[]
  volunteerProfile PosyanduVolunteer? @relation("VolunteerUser")

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Role {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  permissions String[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  users       UserRole[]

  @@map("roles")
}

model UserRole {
  id         String   @id @default(cuid())
  userId     String
  roleId     String
  assignedAt DateTime @default(now())
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model School {
  id             String               @id @default(cuid())
  name           String
  principalName  String
  principalPhone String
  address        String
  totalStudents  Int
  notes          String?
  latitude       Float?
  longitude      Float?
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  deletedAt      DateTime?
  deliveries     Delivery[]
  distributions  DistributionSchool[]
  feedback       Feedback[]
  students       Student[]
  classes        Class[]
  wasteRecords   WasteRecord[]

  @@map("schools")
}

model Student {
  id            String                  @id @default(cuid())
  nisn          String                  @unique
  name          String
  age           Int
  gender        Gender
  grade         String
  parentName    String
  notes         String?
  schoolId      String
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  deletedAt     DateTime?
  feedback      Feedback[]
  consultations NutritionConsultation[]
  school        School                  @relation(fields: [schoolId], references: [id])

  @@map("students")
}

model Class {
  id            String    @id @default(cuid())
  name          String
  grade         Int
  capacity      Int
  currentCount  Int       @default(0)
  teacherName   String?
  notes         String?
  schoolId      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
  school        School    @relation(fields: [schoolId], references: [id])

  @@map("classes")
}

model Posyandu {
  id               String            @id @default(cuid())
  name             String
  headName         String
  headPhone        String
  address          String
  notes            String?
  latitude         Float?
  longitude        Float?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  deletedAt        DateTime?
  deliveries       Delivery[]
  lactatingMothers LactatingMother[]
  pregnantWomen    PregnantWoman[]
  toddlers         Toddler[]
  
  // Enhanced Posyandu relationships
  programs         PosyanduProgram[]      @relation("PosyanduPrograms")
  participants     PosyanduParticipant[]  @relation("PosyanduParticipants")
  activities       PosyanduActivity[]     @relation("PosyanduActivities")
  volunteers       PosyanduVolunteer[]    @relation("PosyanduVolunteers")

  @@map("posyandu")
}

model PregnantWoman {
  id         String    @id @default(cuid())
  nik        String    @unique
  name       String
  age        Int
  posyanduId String?
  notes      String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  posyandu   Posyandu? @relation(fields: [posyanduId], references: [id])

  @@map("pregnant_women")
}

model LactatingMother {
  id         String    @id @default(cuid())
  nik        String    @unique
  name       String
  age        Int
  posyanduId String?
  notes      String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  posyandu   Posyandu? @relation(fields: [posyanduId], references: [id])

  @@map("lactating_mothers")
}

model Toddler {
  id         String    @id @default(cuid())
  nik        String    @unique
  name       String
  age        Int
  gender     Gender
  parentName String
  posyanduId String?
  notes      String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  posyandu   Posyandu? @relation(fields: [posyanduId], references: [id])

  @@map("toddlers")
}

// Enhanced Posyandu Management Models
model PosyanduProgram {
  id                   String                @id @default(cuid())
  posyanduId           String
  name                 String
  description          String?
  programType          ProgramType
  targetBeneficiaries  Int
  startDate            DateTime
  endDate              DateTime?
  status               ProgramStatus         @default(ACTIVE)
  budget               Decimal?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  deletedAt            DateTime?
  
  // Relationships
  posyandu             Posyandu              @relation("PosyanduPrograms", fields: [posyanduId], references: [id])
  participants         PosyanduParticipant[]
  activities           PosyanduActivity[]
  nutritionPlans       NutritionPlan[]

  @@map("posyandu_programs")
}

model PosyanduParticipant {
  id               String               @id @default(cuid())
  posyanduId       String
  programId        String?
  
  // Personal Info
  name             String
  nik              String?              @unique
  dateOfBirth      DateTime
  gender           Gender
  address          String
  phoneNumber      String?
  
  // Participant Type
  participantType  ParticipantType
  
  // Health Status
  currentWeight    Decimal?
  currentHeight    Decimal?
  nutritionStatus  NutritionStatus?
  healthCondition  String?
  allergies        String?
  
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  deletedAt        DateTime?
  
  // Relationships
  posyandu         Posyandu             @relation("PosyanduParticipants", fields: [posyanduId], references: [id])
  program          PosyanduProgram?     @relation(fields: [programId], references: [id])
  healthRecords    HealthRecord[]
  nutritionPlans   NutritionPlan[]

  @@map("posyandu_participants")
}

model HealthRecord {
  id                  String                @id @default(cuid())
  participantId       String
  recordDate          DateTime
  
  // Measurements
  weight              Decimal?
  height              Decimal?
  headCircumference   Decimal?              // For toddlers
  armCircumference    Decimal?              // MUAC
  
  // Health Indicators
  bloodPressure       String?
  hemoglobin          Decimal?
  temperature         Decimal?
  
  // Growth Assessment
  weightForAge        String?               // Z-score category
  heightForAge        String?               // Z-score category
  weightForHeight     String?               // Z-score category
  
  // Clinical Notes
  symptoms            String?
  diagnosis           String?
  treatment           String?
  notes               String?
  
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  deletedAt           DateTime?
  
  // Relationships
  participant         PosyanduParticipant   @relation(fields: [participantId], references: [id])

  @@map("health_records")
}

model NutritionPlan {
  id                  String                @id @default(cuid())
  participantId       String
  programId           String?
  
  planName            String
  description         String?
  targetCalories      Int?
  targetProtein       Decimal?
  targetFat           Decimal?
  targetCarbs         Decimal?
  
  // Special Requirements
  dietaryRestrictions String?
  supplementation     String?
  
  startDate           DateTime
  endDate             DateTime?
  status              PlanStatus            @default(ACTIVE)
  
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  deletedAt           DateTime?
  
  // Relationships
  participant         PosyanduParticipant   @relation(fields: [participantId], references: [id])
  program             PosyanduProgram?      @relation(fields: [programId], references: [id])
  recipes             NutritionPlanRecipe[]

  @@map("nutrition_plans")
}

model NutritionPlanRecipe {
  id               String          @id @default(cuid())
  nutritionPlanId  String
  recipeId         String
  
  frequency        String          // Daily, Weekly, etc.
  portionSize      Decimal
  mealTime         MealTime
  notes            String?
  
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  deletedAt        DateTime?
  
  // Relationships
  nutritionPlan    NutritionPlan   @relation(fields: [nutritionPlanId], references: [id])
  recipe           Recipe          @relation("NutritionPlanRecipes", fields: [recipeId], references: [id])

  @@map("nutrition_plan_recipes")
}

model PosyanduActivity {
  id                  String           @id @default(cuid())
  posyanduId          String
  programId           String?
  
  activityName        String
  activityType        ActivityType
  description         String?
  scheduledDate       DateTime
  actualDate          DateTime?
  duration            Int?             // minutes
  
  participantCount    Int?
  targetParticipants  Int?
  
  status              ActivityStatus   @default(PLANNED)
  notes               String?
  
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  deletedAt           DateTime?
  
  // Relationships
  posyandu            Posyandu         @relation("PosyanduActivities", fields: [posyanduId], references: [id])
  program             PosyanduProgram? @relation(fields: [programId], references: [id])

  @@map("posyandu_activities")
}

model PosyanduVolunteer {
  id               String           @id @default(cuid())
  posyanduId       String
  userId           String?          @unique
  
  name             String
  phone            String?
  email            String?
  address          String
  
  role             VolunteerRole
  specialization   String?
  trainingStatus   TrainingStatus   @default(BASIC)
  activeStatus     Boolean          @default(true)
  
  joinDate         DateTime
  
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  deletedAt        DateTime?
  
  // Relationships
  posyandu         Posyandu         @relation("PosyanduVolunteers", fields: [posyanduId], references: [id])
  user             User?            @relation("VolunteerUser", fields: [userId], references: [id])

  @@map("posyandu_volunteers")
}

model RawMaterial {
  id              String               @id @default(cuid())
  name            String
  category        MaterialCategory
  unit            String
  description     String?
  caloriesPer100g Float?
  proteinPer100g  Float?
  fatPer100g      Float?
  carbsPer100g    Float?
  fiberPer100g    Float?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  deletedAt       DateTime?
  inventory       InventoryItem[]
  menuItems       MenuItemIngredient[]
  qualityChecks   QualityCheck[]       @relation("MaterialQualityChecks")

  @@map("raw_materials")
}

model InventoryItem {
  id              String                 @id @default(cuid())
  rawMaterialId   String
  quantity        Float
  unitPrice       Float
  totalPrice      Float
  expiryDate      DateTime?
  batchNumber     String?
  supplierId      String?
  qualityStatus   QualityStatus          @default(GOOD)
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  deletedAt       DateTime?
  rawMaterial     RawMaterial            @relation(fields: [rawMaterialId], references: [id])
  supplier        Supplier?              @relation(fields: [supplierId], references: [id])
  qualityChecks   QualityCheck[]         @relation("MaterialQualityChecks")

  @@map("inventory_items")
}

model Supplier {
  id          String          @id @default(cuid())
  name        String
  contactName String
  phone       String
  email       String?
  address     String
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  deletedAt   DateTime?
  inventory   InventoryItem[]
  items       Item[]

  @@map("suppliers")
}

model Menu {
  id            String       @id @default(cuid())
  name          String
  description   String?
  menuDate      DateTime
  mealType      MealType     @default(LUNCH)
  targetGroup   TargetGroup  @default(STUDENT)
  isActive      Boolean      @default(true)
  createdById   String
  totalCalories Float?
  totalProtein  Float?
  totalFat      Float?
  totalCarbs    Float?
  totalFiber    Float?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  deletedAt     DateTime?
  menuItems     MenuItem[]
  createdBy     User         @relation(fields: [createdById], references: [id])
  recipes       Recipe[]
  productionPlans ProductionPlan[]

  @@map("menus")
}

model MenuItem {
  id          String               @id @default(cuid())
  menuId      String
  name        String
  category    FoodCategory
  servingSize Float
  description String?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  ingredients MenuItemIngredient[]
  menu        Menu                 @relation(fields: [menuId], references: [id], onDelete: Cascade)

  @@map("menu_items")
}

model MenuItemIngredient {
  id            String      @id @default(cuid())
  menuItemId    String
  rawMaterialId String
  quantity      Float
  menuItem      MenuItem    @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
  rawMaterial   RawMaterial @relation(fields: [rawMaterialId], references: [id])

  @@unique([menuItemId, rawMaterialId])
  @@map("menu_item_ingredients")
}

model NutritionConsultation {
  id        String             @id @default(cuid())
  studentId String
  question  String
  answer    String?
  status    ConsultationStatus @default(PENDING)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  student   Student            @relation(fields: [studentId], references: [id])

  @@map("nutrition_consultations")
}

model QualityCheck {
  id            String           @id @default(cuid())
  type          QualityCheckType
  referenceType String
  referenceId   String
  checkedBy     String?
  color         String?
  taste         String?
  aroma         String?
  texture       String?
  temperature   Float?
  status        QualityStatus    @default(PENDING)
  notes         String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  
  // Relations based on referenceType
  inventoryItem InventoryItem?   @relation("MaterialQualityChecks", fields: [referenceId], references: [id], map: "fk_quality_checks_inventory")
  rawMaterial   RawMaterial?     @relation("MaterialQualityChecks", fields: [referenceId], references: [id], map: "fk_quality_checks_raw_material")

  @@unique([referenceType, referenceId])
  @@index([referenceType, referenceId])
  @@map("quality_checks")
}

model FoodSample {
  id          String       @id @default(cuid())
  sampleDate  DateTime     @default(now())
  menuName    String
  batchNumber String
  sampleType  SampleType
  storageDays Int          @default(3)
  status      SampleStatus @default(STORED)
  notes       String?
  disposedAt  DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("food_samples")
}

model Driver {
  id              String        @id @default(cuid())
  employeeId      String        @unique
  name            String
  phone           String
  email           String?
  licenseNumber   String        @unique
  licenseExpiry   DateTime
  address         String?
  emergencyContact String?
  emergencyPhone  String?
  isActive        Boolean       @default(true)
  rating          Float?        @default(5.0)
  totalDeliveries Int           @default(0)
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  deletedAt       DateTime?
  distributions   Distribution[]
  deliveries      Delivery[]

  @@map("drivers")
}

model Distribution {
  id                String                @id @default(cuid())
  distributionDate  DateTime              @default(now())
  driverId          String?
  vehicleId         String?
  status            DistributionStatus    @default(PREPARING)
  totalPortions     Int
  notes             String?
  estimatedDuration Int?
  actualDuration    Int?
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  deliveries        Delivery[]
  schools           DistributionSchool[]
  driver            Driver?               @relation(fields: [driverId], references: [id])
  vehicle           Vehicle?              @relation(fields: [vehicleId], references: [id])

  @@map("distributions")
}

model DistributionSchool {
  id              String       @id @default(cuid())
  distributionId  String
  schoolId        String
  plannedPortions Int
  actualPortions  Int?
  routeOrder      Int
  distribution    Distribution @relation(fields: [distributionId], references: [id], onDelete: Cascade)
  school          School       @relation(fields: [schoolId], references: [id])

  @@unique([distributionId, schoolId])
  @@map("distribution_schools")
}

model Vehicle {
  id            String         @id @default(cuid())
  plateNumber   String         @unique
  type          String
  capacity      Int
  isActive      Boolean        @default(true)
  lastService   DateTime?
  notes         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?
  deliveries    Delivery[]
  distributions Distribution[]

  @@map("vehicles")
}

model Delivery {
  id                String         @id @default(cuid())
  distributionId    String
  schoolId          String?
  posyanduId        String?
  vehicleId         String?
  driverId          String?
  deliveryOrder     Int
  plannedTime       DateTime?
  departureTime     DateTime?
  arrivalTime       DateTime?
  completionTime    DateTime?
  portionsDelivered Int?
  status            DeliveryStatus @default(PENDING)
  deliveryProof     String?
  notes             String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  distribution      Distribution   @relation(fields: [distributionId], references: [id])
  posyandu          Posyandu?      @relation(fields: [posyanduId], references: [id])
  school            School?        @relation(fields: [schoolId], references: [id])
  vehicle           Vehicle?       @relation(fields: [vehicleId], references: [id])
  driver            Driver?        @relation(fields: [driverId], references: [id])

  @@map("deliveries")
}

model FinancialTransaction {
  id           String              @id @default(cuid())
  type         TransactionType
  category     TransactionCategory
  amount       Float
  description  String
  referenceId  String?
  receiptUrl   String?
  budgetPeriod String
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  deletedAt    DateTime?

  @@map("financial_transactions")
}

model Budget {
  id        String              @id @default(cuid())
  period    String
  category  TransactionCategory
  allocated Float
  spent     Float               @default(0)
  remaining Float               @default(0)
  notes     String?
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt

  @@unique([period, category])
  @@map("budgets")
}

model WasteRecord {
  id         String      @id @default(cuid())
  recordDate DateTime    @default(now())
  wasteType  WasteType
  source     WasteSource
  weight     Float
  notes      String?
  schoolId   String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  school     School?     @relation(fields: [schoolId], references: [id])

  @@map("waste_records")
}

model Feedback {
  id          String         @id @default(cuid())
  type        FeedbackType
  rating      Int?
  message     String
  source      FeedbackSource
  schoolId    String?
  studentId   String?
  status      FeedbackStatus @default(OPEN)
  response    String?
  respondedAt DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  school      School?        @relation(fields: [schoolId], references: [id])
  student     Student?       @relation(fields: [studentId], references: [id])

  @@map("feedback")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  title     String
  message   String
  type      NotificationType
  priority  Priority         @default(NORMAL)
  isRead    Boolean          @default(false)
  actionUrl String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User             @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  entity    String
  entityId  String
  oldValues Json?
  newValues Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  dataType    String   @default("string")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_configs")
}

enum Gender {
  MALE
  FEMALE
}

enum MaterialCategory {
  PROTEIN
  VEGETABLE
  FRUIT
  GRAIN
  DAIRY
  SPICE
  OIL
  BEVERAGE
  OTHER
}

enum QualityStatus {
  GOOD
  FAIR
  POOR
  REJECTED
  PENDING
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}

enum TargetGroup {
  STUDENT
  PREGNANT_WOMAN
  LACTATING_MOTHER
  TODDLER
  ELDERLY
}

enum FoodCategory {
  RICE
  MAIN_DISH
  VEGETABLE
  FRUIT
  BEVERAGE
  SNACK
}

enum ConsultationStatus {
  PENDING
  ANSWERED
  CLOSED
}

enum ProductionStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum QualityCheckType {
  RAW_MATERIAL
  PRODUCTION
  PACKAGING
  DISTRIBUTION
}

enum SampleType {
  RAW_MATERIAL
  COOKED_FOOD
  PACKAGED_MEAL
}

enum SampleStatus {
  STORED
  TESTED
  DISPOSED
}

enum DistributionStatus {
  PREPARING
  IN_TRANSIT
  DELIVERED
  COMPLETED
  CANCELLED
}

enum DeliveryStatus {
  PENDING
  IN_TRANSIT
  DELIVERED
  FAILED
  CANCELLED
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum TransactionCategory {
  RAW_MATERIALS
  TRANSPORTATION
  UTILITIES
  SALARIES
  EQUIPMENT
  MAINTENANCE
  OTHER
}

enum WasteType {
  ORGANIC
  INORGANIC
  PACKAGING
}

enum WasteSource {
  PREPARATION
  PRODUCTION
  PACKAGING
  SCHOOL_LEFTOVER
  EXPIRED_MATERIAL
}

enum FeedbackType {
  FOOD_QUALITY
  DELIVERY_SERVICE
  PORTION_SIZE
  VARIETY
  GENERAL
  COMPLAINT
}

enum FeedbackSource {
  STUDENT
  TEACHER
  PARENT
  SCHOOL_ADMIN
  POSYANDU_STAFF
}

enum FeedbackStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum NotificationType {
  SYSTEM
  PRODUCTION
  DISTRIBUTION
  QUALITY_ALERT
  INVENTORY_LOW
  BUDGET_ALERT
  FEEDBACK
}

enum Priority {
  LOW
  NORMAL
  HIGH
  CRITICAL
}

// Additional enums for production
enum RecipeCategory {
  MAIN_COURSE
  SIDE_DISH
  DESSERT
  BEVERAGE
  SNACK
}

enum RecipeDifficulty {
  EASY
  MEDIUM
  HARD
  EXPERT
}

enum ItemCategory {
  STAPLE_FOOD         // Makanan pokok (beras, mie, roti)
  PROTEIN             // Protein (daging, ikan, telur, tahu, tempe)
  VEGETABLES          // Sayuran
  FRUITS              // Buah-buahan
  DAIRY               // Susu dan produk olahan susu
  SPICES_SEASONING    // Bumbu dan penyedap
  COOKING_OIL         // Minyak goreng
  BEVERAGES           // Minuman
  SNACKS              // Camilan
  OTHERS              // Lainnya
}

enum ItemUnit {
  KG                  // Kilogram
  GRAM                // Gram
  LITER               // Liter
  ML                  // Mililiter
  PCS                 // Pieces/Buah
  PACK                // Pack/Kemasan
  BOX                 // Box/Kotak
  BOTTLE              // Botol
  CAN                 // Kaleng
  SACHET              // Sachet
}

// Raw Materials and Items
model Item {
  id                    String                @id @default(cuid())
  name                  String
  description           String?
  category              ItemCategory
  unit                  ItemUnit
  unitPrice             Float?
  nutritionPer100g      Json?                 // Nutrition per 100g
  allergens             String[]
  shelfLife             Int?                  // days
  storageRequirement    String?
  supplierId            String?
  isActive              Boolean               @default(true)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  supplier              Supplier?             @relation(fields: [supplierId], references: [id])
  recipeIngredients     RecipeIngredient[]

  @@map("items")
}

// Recipe and Production Models
model Recipe {
  id                    String            @id @default(cuid())
  name                  String
  description           String?
  category              RecipeCategory
  servingSize           Int
  prepTime              Int // minutes
  cookTime              Int // minutes
  difficulty            RecipeDifficulty
  instructions          Json
  nutritionInfo         Json?
  allergenInfo          String[]
  cost                  Float?
  isActive              Boolean           @default(true)
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  ingredients           RecipeIngredient[]
  menus                 Menu[]
  productionBatches     ProductionBatch[]
  nutritionPlans        NutritionPlanRecipe[] @relation("NutritionPlanRecipes")

  @@map("recipes")
}

model RecipeIngredient {
  id         String   @id @default(cuid())
  recipeId   String
  itemId     String
  quantity   Float
  unit       String
  notes      String?
  createdAt  DateTime @default(now())
  recipe     Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  item       Item     @relation(fields: [itemId], references: [id])

  @@map("recipe_ingredients")
}

// Production Management Models

model ProductionPlan {
  id                String               @id @default(cuid())
  planDate          DateTime
  targetPortions    Int
  menuId            String?
  kitchenId         String?
  status            ProductionPlanStatus @default(PLANNED)
  plannedStartTime  DateTime?
  plannedEndTime    DateTime?
  actualStartTime   DateTime?
  actualEndTime     DateTime?
  notes             String?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  menu              Menu?                @relation(fields: [menuId], references: [id])
  batches           ProductionBatch[]
  qualityChecks     QualityCheckpoint[]

  @@map("production_plans")
}

model ProductionBatch {
  id               String                @id @default(cuid())
  productionPlanId String
  batchNumber      String
  recipeId         String?
  plannedQuantity  Int
  actualQuantity   Int?
  status           ProductionBatchStatus @default(PENDING)
  startedAt        DateTime?
  completedAt      DateTime?
  qualityScore     Float?
  temperatureLog   Json?
  notes            String?
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  productionPlan   ProductionPlan        @relation(fields: [productionPlanId], references: [id], onDelete: Cascade)
  recipe           Recipe?               @relation(fields: [recipeId], references: [id])
  qualityChecks    QualityCheckpoint[]
  resourceUsage    ResourceUsage[]

  @@map("production_batches")
}

model ProductionResource {
  id                   String                 @id @default(cuid())
  name                 String
  type                 ProductionResourceType
  capacityPerHour      Int?
  availabilitySchedule Json?
  maintenanceSchedule  Json?
  status               ResourceStatus         @default(AVAILABLE)
  location             String?
  specifications       Json?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  usage                ResourceUsage[]

  @@map("production_resources")
}

model ResourceUsage {
  id                String             @id @default(cuid())
  batchId           String
  resourceId        String
  startTime         DateTime
  endTime           DateTime?
  plannedDuration   Int // minutes
  actualDuration    Int? // minutes
  efficiency        Float? // percentage
  notes             String?
  createdAt         DateTime           @default(now())
  batch             ProductionBatch    @relation(fields: [batchId], references: [id], onDelete: Cascade)
  resource          ProductionResource @relation(fields: [resourceId], references: [id])

  @@map("resource_usage")
}

model QualityCheckpoint {
  id                  String               @id @default(cuid())
  productionPlanId    String?
  batchId             String?
  checkpointType      String
  checkedAt           DateTime             @default(now())
  checkedBy           String
  status              QualityCheckStatus
  temperature         Float?
  visualInspection    String?
  tasteTest           String?
  textureEvaluation   String?
  correctiveAction    String?
  photos              String[]
  metrics             Json?
  notes               String?
  createdAt           DateTime             @default(now())
  productionPlan      ProductionPlan?      @relation(fields: [productionPlanId], references: [id])
  batch               ProductionBatch?     @relation(fields: [batchId], references: [id])
  checker             User                 @relation(fields: [checkedBy], references: [id])

  @@map("quality_checkpoints")
}

model ProductionMetrics {
  id               String   @id @default(cuid())
  date             DateTime
  totalProduction  Int
  targetProduction Int
  efficiency       Float // percentage
  qualityScore     Float // average
  wastageAmount    Float // kg
  costPerPortion   Float
  energyUsage      Float? // kWh
  waterUsage       Float? // liters
  laborHours       Float
  equipmentUptime  Float // percentage
  createdAt        DateTime @default(now())

  @@unique([date])
  @@map("production_metrics")
}

model QualityStandard {
  id              String   @id @default(cuid())
  name            String
  description     String
  targetValue     Float
  currentValue    Float
  unit            String
  category        QualityStandardCategory
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("quality_standards")
}

// Additional enum for production
// Production Management Enums
enum ProductionPlanStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum ProductionBatchStatus {
  PENDING
  IN_PROGRESS
  QUALITY_CHECK
  COMPLETED
  REJECTED
  REWORK_REQUIRED
}

enum ProductionResourceType {
  EQUIPMENT
  STAFF
  KITCHEN_AREA
  VEHICLE
  STORAGE
}

enum ResourceStatus {
  AVAILABLE
  IN_USE
  MAINTENANCE
  UNAVAILABLE
  RETIRED
}

enum QualityCheckStatus {
  PASS
  FAIL
  CONDITIONAL
  PENDING
  REWORK_REQUIRED
}

enum QualityStandardCategory {
  TEMPERATURE_CONTROL
  VISUAL_APPEARANCE
  HYGIENE_STANDARDS
  PORTION_CONTROL
  NUTRITION_VALUE
  SAFETY_STANDARDS
}

// Posyandu Management Enums
enum ProgramType {
  MATERNAL_HEALTH
  CHILD_NUTRITION
  IMMUNIZATION
  FAMILY_PLANNING
  HEALTH_EDUCATION
  GROWTH_MONITORING
  NUTRITION_COUNSELING
}

enum ProgramStatus {
  ACTIVE
  INACTIVE
  COMPLETED
  SUSPENDED
  CANCELLED
}

enum ParticipantType {
  PREGNANT
  LACTATING
  TODDLER
  ELDERLY
  CHILD
}

enum NutritionStatus {
  NORMAL
  UNDERWEIGHT
  OVERWEIGHT
  STUNTED
  WASTED
  SEVERE_MALNUTRITION
  OBESITY
}

enum PlanStatus {
  ACTIVE
  COMPLETED
  PAUSED
  CANCELLED
  UNDER_REVIEW
}

enum MealTime {
  BREAKFAST
  LUNCH
  DINNER
  SNACK_MORNING
  SNACK_AFTERNOON
  SNACK_EVENING
}

enum ActivityType {
  HEALTH_CHECK
  NUTRITION_COUNSELING
  COOKING_DEMONSTRATION
  HEALTH_EDUCATION
  IMMUNIZATION
  GROWTH_MONITORING
  WEIGHT_MEASUREMENT
  HEIGHT_MEASUREMENT
  BLOOD_PRESSURE_CHECK
  HEMOGLOBIN_TEST
}

enum ActivityStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  POSTPONED
}

enum VolunteerRole {
  CADRE_COORDINATOR
  HEALTH_CADRE
  NUTRITION_CADRE
  DATA_RECORDER
  COMMUNITY_MOBILIZER
  TRAINING_COORDINATOR
}

enum TrainingStatus {
  BASIC
  INTERMEDIATE
  ADVANCED
  CERTIFIED
  NEEDS_REFRESH
  NOT_TRAINED
}
